package forme;

import domen.Clan;
import domen.Korisnik;
import domen.Dogadjaj;
import domen.Clan;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;
import kontroler.Kontroler;
import modeli.ModelTabeleDogadjaj;
import modeli.ModelTabeleClan;
import transfer.ServerskiOdgovor;

public class UnosClana extends javax.swing.JFrame {
    ArrayList<Clan> listaClanova = new ArrayList<>();
    ArrayList<Korisnik> listaKorisnika = new ArrayList<>();
    String jmbg;
    /**
     * Creates new form KlijentForma
     */
    public UnosClana() {
        initComponents();
        this.setLocationRelativeTo(null);
        Kontroler.getInstance().vratiClanoveZaUnosFormu();
        Kontroler.getInstance().vratiKorisnikeZaUnosFormu();
        //srediTabelu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblIme = new javax.swing.JLabel();
        lblPrezime = new javax.swing.JLabel();
        txtIme = new javax.swing.JTextField();
        txtPrezime = new javax.swing.JTextField();
        btnUnesiClana = new javax.swing.JButton();
        btnOtkazi = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaClanovi = new javax.swing.JTable();
        lblPretraga = new javax.swing.JLabel();
        txtPretraga = new javax.swing.JTextField();
        lblKorisnickoIme = new javax.swing.JLabel();
        lblLozinka = new javax.swing.JLabel();
        txtkorisnickoIme = new javax.swing.JTextField();
        lblJMBG = new javax.swing.JLabel();
        txtJMBG = new javax.swing.JTextField();
        txtLozinka = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin - unos clana");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Unos clana"));

        lblIme.setText("Ime:");

        lblPrezime.setText("Prezime:");

        btnUnesiClana.setText("Unesi clana");
        btnUnesiClana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnesiClanaActionPerformed(evt);
            }
        });

        btnOtkazi.setText("Otkaži");
        btnOtkazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtkaziActionPerformed(evt);
            }
        });

        tabelaClanovi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabelaClanovi);

        lblPretraga.setText("Pretraga: (filter)");

        txtPretraga.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPretragaKeyReleased(evt);
            }
        });

        lblKorisnickoIme.setText("Korisničko ime:");

        lblLozinka.setText("Lozinka:");

        lblJMBG.setText("JMBG:");

        txtLozinka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLozinkaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblJMBG)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtJMBG, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblIme)
                                        .addGap(19, 19, 19))
                                    .addComponent(lblPrezime))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtIme, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                                    .addComponent(txtPrezime)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(lblKorisnickoIme))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblLozinka)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtkorisnickoIme, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtLozinka))))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(btnUnesiClana, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOtkazi, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblPretraga)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPretraga)))
                .addGap(23, 23, 23))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIme)
                    .addComponent(txtIme, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPretraga)
                    .addComponent(txtPretraga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPrezime)
                            .addComponent(txtPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtJMBG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblJMBG))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtkorisnickoIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblKorisnickoIme))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLozinka)
                            .addComponent(txtLozinka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnOtkazi, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUnesiClana, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOtkaziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtkaziActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnOtkaziActionPerformed

    private void btnUnesiClanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnesiClanaActionPerformed
        // TODO add your handling code here:
        if(txtIme.getText().isEmpty() || txtPrezime.getText().isEmpty() || txtJMBG.getText().isEmpty()
                || String.valueOf(txtLozinka.getPassword()).isEmpty() || txtkorisnickoIme.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Potrebno je popuniti sva polja!");
            return;
        }
        
        String ime = txtIme.getText();
        setJmbg(txtJMBG.getText());
        String prezime = txtPrezime.getText();
        String korisnickoIme = txtkorisnickoIme.getText();
        String lozinka = String.valueOf(txtLozinka.getPassword());
        
        Korisnik k = new Korisnik();
        k.setKorisnickoIme(korisnickoIme);
        k.setLozinka(lozinka);
        
        Clan p = new Clan();
        p.setIme(ime);
        p.setPrezime(prezime);
        p.setJmbg(jmbg);
        p.setStatus("Nije aplicirao");        
        k.setClan(p);
        
        //validacija da li je vec uneo to korisnicko ime i lozinku za nekog
        for(Korisnik kor : listaKorisnika) {
            if(kor.getKorisnickoIme().equals(korisnickoIme) && kor.getLozinka().equals(lozinka)) {
                JOptionPane.showMessageDialog(this, "Već postoje ovo korisnicko ime i lozinka!");
                return;
            }
        }
        
        
        ModelTabeleClan mtp = (ModelTabeleClan) tabelaClanovi.getModel();
        boolean postoji = mtp.daLiPostoji(p);
        
        if(!postoji) {
        
        Kontroler.getInstance().dodajKorisnikaUBazu(k);
        
        listaClanova.add(p);
        srediTabelu();
        resetujPolja();
        } else {
            JOptionPane.showMessageDialog(this, "Već postoji ovaj clan!");
            return;
        }
    }//GEN-LAST:event_btnUnesiClanaActionPerformed

    private void txtPretragaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPretragaKeyReleased
        // TODO add your handling code here:
        String tekst = txtPretraga.getText();
        filter(tekst);
    }//GEN-LAST:event_txtPretragaKeyReleased

    private void txtLozinkaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLozinkaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLozinkaActionPerformed

 private void filter(String tekst) {
        ModelTabeleClan model = (ModelTabeleClan) tabelaClanovi.getModel();
        TableRowSorter<ModelTabeleClan> tr = new TableRowSorter<ModelTabeleClan>(model);
        tabelaClanovi.setRowSorter(tr);
        
        tr.setRowFilter(RowFilter.regexFilter(tekst));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UnosClana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UnosClana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UnosClana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UnosClana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UnosClana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOtkazi;
    private javax.swing.JButton btnUnesiClana;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblIme;
    private javax.swing.JLabel lblJMBG;
    private javax.swing.JLabel lblKorisnickoIme;
    private javax.swing.JLabel lblLozinka;
    private javax.swing.JLabel lblPretraga;
    private javax.swing.JLabel lblPrezime;
    private javax.swing.JTable tabelaClanovi;
    private javax.swing.JTextField txtIme;
    private javax.swing.JTextField txtJMBG;
    private javax.swing.JPasswordField txtLozinka;
    private javax.swing.JTextField txtPretraga;
    private javax.swing.JTextField txtPrezime;
    private javax.swing.JTextField txtkorisnickoIme;
    // End of variables declaration//GEN-END:variables

    private void srediTabelu() {
        ModelTabeleClan mtp = new ModelTabeleClan(listaClanova);
        tabelaClanovi.setModel(mtp);
    }

    public void dodajClana(ServerskiOdgovor so) {
        if (so.isFleg()) {
            JOptionPane.showMessageDialog(this, so.getPoruka());
        } else {
            JOptionPane.showMessageDialog(this, so.getPoruka());
            int red = listaClanova.size()-1;
            listaClanova.remove(red);
            srediTabelu();
        }
    }

    public void vratiClanoveZaUnosFormu(ServerskiOdgovor so) {
        if (so.isFleg()) {            
            System.out.println();
            listaClanova =  (ArrayList<Clan>) so.getOdgovor();
            srediTabelu();
        } else {
            JOptionPane.showMessageDialog(this, "Neuspešno učitavanje clanova!");
        }
    }


    public void dodajKorisnika(ServerskiOdgovor so) {
         if (so.isFleg()) {
            JOptionPane.showMessageDialog(this, so.getPoruka());
        } else {
            JOptionPane.showMessageDialog(this, so.getPoruka());
        }
    }

    private void resetujPolja() {
        txtIme.setText("");
        txtJMBG.setText("");
        txtLozinka.setText("");
        txtPrezime.setText("");
        txtkorisnickoIme.setText("");
    }
    
    public void setJmbg(String jmbg) {
        
                int greska = 0; 
		// Provera jmbg za upisivanje
		if (jmbg == null) {
			System.out.println("jmbg ne sme da bude null.");
			greska = 1;
		} else if (jmbg.equals("")) {
			System.out.println("jmbg ne sme da bude prazan string.");
			greska = 1;
		} else if (jmbg.length() != 13) {
			JOptionPane.showMessageDialog(this, "JMBG mora imati tačno 13 cifara!");
			greska = 1;
		}

		if (greska != 1) {
			// Pretvaranje svake cifre u poseban broj, radi provere kontrolne
			// cifre
			Integer A = Integer.parseInt(jmbg.substring(0, jmbg.length() - 12));
			Integer B = Integer.parseInt(jmbg.substring(1, jmbg.length() - 11));
			Integer C = Integer.parseInt(jmbg.substring(2, jmbg.length() - 10));
			Integer D = Integer.parseInt(jmbg.substring(3, jmbg.length() - 9));
			Integer E = Integer.parseInt(jmbg.substring(4, jmbg.length() - 8));
			Integer F = Integer.parseInt(jmbg.substring(5, jmbg.length() - 7));
			Integer G = Integer.parseInt(jmbg.substring(6, jmbg.length() - 6));
			Integer H = Integer.parseInt(jmbg.substring(7, jmbg.length() - 5));
			Integer I = Integer.parseInt(jmbg.substring(8, jmbg.length() - 4));
			Integer J = Integer.parseInt(jmbg.substring(9, jmbg.length() - 3));
			Integer K = Integer.parseInt(jmbg.substring(10, jmbg.length() - 2));
			Integer L = Integer.parseInt(jmbg.substring(11, jmbg.length() - 1));
			Integer M = Integer.parseInt(jmbg.substring(12, jmbg.length() - 0));

			// Izracunavanje Kontrolne cifre
			int kontrolnacifra = 11 - ((7 * (A + G) + 6 * (B + H) + 5 * (C + I)
					+ 4 * (D + J) + 3 * (E + K) + 2 * (F + L)) % 11);

			// Provera Dana, Meseca i Godine Rodjenja
			Integer danRodjenjaINT = Integer.parseInt(jmbg.substring(0,
					jmbg.length() - 11));
			Integer mesecRodjenjaINT = Integer.parseInt(jmbg.substring(2,
					jmbg.length() - 9));
			Integer godinaRodjenjaINT = Integer.parseInt(jmbg.substring(4,
					jmbg.length() - 6));

			System.out.println(" dan rodjenja je:" + danRodjenjaINT
					+ " mesec rodjenja je: " + mesecRodjenjaINT
					+ " godina rodjenaj je: " + godinaRodjenjaINT);

			// Kontrola Dana u mesecu

			if (mesecRodjenjaINT > 12) {
				JOptionPane.showMessageDialog(this, "Mesec rođenja ne može biti preko 12!");
				greska = 1;
			}

			else if (mesecRodjenjaINT == 1) {
				if (danRodjenjaINT > 31) {
					JOptionPane.showMessageDialog(this, "Januar nema više od 31 dan!");
					greska = 1;
				}
			}

			else if (mesecRodjenjaINT == 2) {
				if (godinaRodjenjaINT % 4 == 0) {

					if (danRodjenjaINT > 29) {
						JOptionPane.showMessageDialog(this, "Februar prestupne godine nema više od 29 dana!");
						greska = 1;
					}

				} else if (godinaRodjenjaINT % 4 != 0) {

					if (danRodjenjaINT > 28) {
						JOptionPane.showMessageDialog(this, "Februar nema više od 28 dan!");
						greska = 1;
					}
				}
			}

			else if (mesecRodjenjaINT == 3) {
				if (danRodjenjaINT > 31) {
					JOptionPane.showMessageDialog(this, "Mart nema više od 31 dan!");
					greska = 1;
				}
			}

			else if (mesecRodjenjaINT == 4) {
				if (danRodjenjaINT > 30) {
					JOptionPane.showMessageDialog(this, "April nema više od 30 dan!");
					greska = 1;
				}
			}

			else if (mesecRodjenjaINT == 5) {
				if (danRodjenjaINT > 31) {
					JOptionPane.showMessageDialog(this, "Maj nema više od 31 dan!");
					greska = 1;
				}
			}

			else if (mesecRodjenjaINT == 6) {
				if (danRodjenjaINT > 30) {
					JOptionPane.showMessageDialog(this, "Jun nema više od 30 dan!");
					greska = 1;
				}
			}

			else if (mesecRodjenjaINT == 7) {
				if (danRodjenjaINT > 31) {
					JOptionPane.showMessageDialog(this, "Jul nema više od 31 dan!");
					greska = 1;
				}
			}

			else if (mesecRodjenjaINT == 8) {
				if (danRodjenjaINT > 31) {
					JOptionPane.showMessageDialog(this, "Avgust nema više od 31 dan!");
					greska = 1;
				}
			}

			else if (mesecRodjenjaINT == 9) {
				if (danRodjenjaINT > 30) {
					JOptionPane.showMessageDialog(this, "Septembar nema više od 30 dana!");
					greska = 1;
				}
			}

			else if (mesecRodjenjaINT == 10) {
				if (danRodjenjaINT > 31) {
					JOptionPane.showMessageDialog(this, "Oktobar nema više od 31 dan!");
					greska = 1;
				}
			}

			else if (mesecRodjenjaINT == 11) {
				if (danRodjenjaINT > 30) {
					JOptionPane.showMessageDialog(this, "Novembar nema više od 30 dana!");
					greska = 1;
				}
			}

			else if (mesecRodjenjaINT == 12) {
				if (danRodjenjaINT > 31) {
					JOptionPane.showMessageDialog(this, "Decembar nema više od 31 dan!");
					greska = 1;
				}
			}

			// Provera koliko cifara u maticnom broju su brojevi
			else {

				int brojac = 0;
				for (int i = 0; i < jmbg.length(); i++) {
					if (Character.isDigit(jmbg.charAt(i))) {

						brojac++;

					} else {
						JOptionPane.showMessageDialog(this, "JMBG koji ste uneli ima slova u sebi!");
						greska = 1;
					}

				}

				System.out.println("od 13 karaktera " + brojac + " su brojevi");

				if (brojac == 13) {
					this.jmbg = jmbg;
				}
			}

			// Provera Kontrolne cifre

			System.out.println("Kontrolna cifra je: " + kontrolnacifra);
			if (kontrolnacifra <= 9) {
				if (kontrolnacifra != M) {
					System.out.println("jmbg nije dobar, ne slaze se kontrolna cifra");
					greska = 1;
				} else {

				}
			} else if (kontrolnacifra > 9) {
				if (M != 0) {
					System.out.println("jmbg nije dobar, ne slaze se kontrolna cifra");
					greska = 1;
				} else {

				}
			}

			this.jmbg = jmbg;
		} else {
			JOptionPane.showMessageDialog(this, "Greska! Proverite maticni broj!");
		}

	}
    
    
    
    public boolean okJmbg(String jmbg) {
                boolean flag = true;
                int greska = 0; 
		// Provera jmbg za upisivanje
		if (jmbg == null) {
			System.out.println("jmbg ne sme da bude null.");
			greska = 1;
                       
		} else if (jmbg.equals("")) {
			System.out.println("jmbg ne sme da bude prazan string.");
			greska = 1;
                        
		} else if (jmbg.length() != 13) {
			JOptionPane.showMessageDialog(this, "JMBG mora imati tačno 13 cifara!");
			greska = 1;
                        
		}

		if (greska != 1) {
			// Pretvaranje svake cifre u poseban broj, radi provere kontrolne
			// cifre
			Integer A = Integer.parseInt(jmbg.substring(0, jmbg.length() - 12));
			Integer B = Integer.parseInt(jmbg.substring(1, jmbg.length() - 11));
			Integer C = Integer.parseInt(jmbg.substring(2, jmbg.length() - 10));
			Integer D = Integer.parseInt(jmbg.substring(3, jmbg.length() - 9));
			Integer E = Integer.parseInt(jmbg.substring(4, jmbg.length() - 8));
			Integer F = Integer.parseInt(jmbg.substring(5, jmbg.length() - 7));
			Integer G = Integer.parseInt(jmbg.substring(6, jmbg.length() - 6));
			Integer H = Integer.parseInt(jmbg.substring(7, jmbg.length() - 5));
			Integer I = Integer.parseInt(jmbg.substring(8, jmbg.length() - 4));
			Integer J = Integer.parseInt(jmbg.substring(9, jmbg.length() - 3));
			Integer K = Integer.parseInt(jmbg.substring(10, jmbg.length() - 2));
			Integer L = Integer.parseInt(jmbg.substring(11, jmbg.length() - 1));
			Integer M = Integer.parseInt(jmbg.substring(12, jmbg.length() - 0));

			// Izracunavanje Kontrolne cifre
			int kontrolnacifra = 11 - ((7 * (A + G) + 6 * (B + H) + 5 * (C + I)
					+ 4 * (D + J) + 3 * (E + K) + 2 * (F + L)) % 11);

			// Provera Dana, Meseca i Godine Rodjenja
			Integer danRodjenjaINT = Integer.parseInt(jmbg.substring(0,
					jmbg.length() - 11));
			Integer mesecRodjenjaINT = Integer.parseInt(jmbg.substring(2,
					jmbg.length() - 9));
			Integer godinaRodjenjaINT = Integer.parseInt(jmbg.substring(4,
					jmbg.length() - 6));

			System.out.println(" dan rodjenja je:" + danRodjenjaINT
					+ " mesec rodjenja je: " + mesecRodjenjaINT
					+ " godina rodjenaj je: " + godinaRodjenjaINT);

			// Kontrola Dana u mesecu

			if (mesecRodjenjaINT > 12) {
				JOptionPane.showMessageDialog(this, "Mesec rođenja ne može biti preko 12!");
				greska = 1;
                               
			}

			else if (mesecRodjenjaINT == 1) {
				if (danRodjenjaINT > 31) {
					JOptionPane.showMessageDialog(this, "Januar nema više od 31 dan!");
					greska = 1;
                                       
				}
			}

			else if (mesecRodjenjaINT == 2) {
				if (godinaRodjenjaINT % 4 == 0) {

					if (danRodjenjaINT > 29) {
						JOptionPane.showMessageDialog(this, "Februar prestupne godine nema više od 29 dana!");
						greska = 1;
                                               
					}

				} else if (godinaRodjenjaINT % 4 != 0) {

					if (danRodjenjaINT > 28) {
						JOptionPane.showMessageDialog(this, "Februar nema više od 28 dan!");
						greska = 1;
                                               
					}
				}
			}

			else if (mesecRodjenjaINT == 3) {
				if (danRodjenjaINT > 31) {
					JOptionPane.showMessageDialog(this, "Mart nema više od 31 dan!");
					greska = 1;
                                     
				}
			}

			else if (mesecRodjenjaINT == 4) {
				if (danRodjenjaINT > 30) {
					JOptionPane.showMessageDialog(this, "April nema više od 30 dan!");
					greska = 1;
                                      
				}
			}

			else if (mesecRodjenjaINT == 5) {
				if (danRodjenjaINT > 31) {
					JOptionPane.showMessageDialog(this, "Maj nema više od 31 dan!");
					greska = 1;
                                        
				}
			}

			else if (mesecRodjenjaINT == 6) {
				if (danRodjenjaINT > 30) {
					JOptionPane.showMessageDialog(this, "Jun nema više od 30 dan!");
					greska = 1;
                                        
				}
			}

			else if (mesecRodjenjaINT == 7) {
				if (danRodjenjaINT > 31) {
					JOptionPane.showMessageDialog(this, "Jul nema više od 31 dan!");
					greska = 1;
                                       
				}
			}

			else if (mesecRodjenjaINT == 8) {
				if (danRodjenjaINT > 31) {
					JOptionPane.showMessageDialog(this, "Avgust nema više od 31 dan!");
					greska = 1;
                                      
				}
			}

			else if (mesecRodjenjaINT == 9) {
				if (danRodjenjaINT > 30) {
					JOptionPane.showMessageDialog(this, "Septembar nema više od 30 dana!");
					greska = 1;
                                       
				}
			}

			else if (mesecRodjenjaINT == 10) {
				if (danRodjenjaINT > 31) {
					JOptionPane.showMessageDialog(this, "Oktobar nema više od 31 dan!");
					greska = 1;
                                        
				}
			}

			else if (mesecRodjenjaINT == 11) {
				if (danRodjenjaINT > 30) {
					JOptionPane.showMessageDialog(this, "Novembar nema više od 30 dana!");
					greska = 1;
                                        
				}
			}

			else if (mesecRodjenjaINT == 12) {
				if (danRodjenjaINT > 31) {
					JOptionPane.showMessageDialog(this, "Decembar nema više od 31 dan!");
					greska = 1;
                                        
				}
			}

			// Provera koliko cifara u maticnom broju su brojevi
			else {

				int brojac = 0;
				for (int i = 0; i < jmbg.length(); i++) {
					if (Character.isDigit(jmbg.charAt(i))) {

						brojac++;

					} else {
						JOptionPane.showMessageDialog(this, "JMBG koji ste uneli ima slova u sebi!");
						greska = 1;
                                                
					}

				}

				System.out.println("od 13 karaktera " + brojac + " su brojevi");

				if (brojac == 13) {
					this.jmbg = jmbg;
				}
			}

			// Provera Kontrolne cifre

			System.out.println("Kontrolna cifra je: " + kontrolnacifra);
			if (kontrolnacifra <= 9) {
				if (kontrolnacifra != M) {
					System.out.println("jmbg nije dobar, ne slaze se kontrolna cifra");
					greska = 1;
                                        
				} else {

				}
			} else if (kontrolnacifra > 9) {
				if (M != 0) {
					System.out.println("jmbg nije dobar, ne slaze se kontrolna cifra");
					greska = 1;
                                        
				} else {

				}
			}

			this.jmbg = jmbg;
		} else {
			JOptionPane.showMessageDialog(this, "Greska! Proverite maticni broj!");
                        flag = false;
		}
                if(greska == 1) {
                    flag = false;
                } else {
                    flag = true;
                }
                return false;
	}

    public void vratiKorisnike(ServerskiOdgovor so) {
        if (so.isFleg()) {            
            System.out.println();
            listaKorisnika =  (ArrayList<Korisnik>) so.getOdgovor();
        } else {
            JOptionPane.showMessageDialog(this, "Neuspešno učitavanje korisnika!");
        }
    }
    
    
}
